/**
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package org.jetbrains.teamcity.rest.models

import com.google.gson.annotations.SerializedName
import org.jetbrains.teamcity.rest.base.*
import org.jetbrains.teamcity.rest.infrastructure.ApiClient
import org.jetbrains.teamcity.rest.infrastructure.RequestConfig
import java.time.LocalDateTime

/**
Represents a locator string for filtering TestOccurrence entities.
Examples:
* `currentlyInvestigated:true` – find last 100 test occurrences which are being currently investigated.
* `build:<buildLocator>` – find test occurrences under build found by buildLocator.
 * @param affectedProject Project (direct or indirect parent) locator.
 * @param branch 
 * @param build Build locator.
 * @param buildType Build type locator.
 * @param count For paginated calls, how many entities to return per page.
 * @param currentlyFailing Is currently failing.
 * @param currentlyInvestigated Is currently investigated.
 * @param currentlyMuted 
 * @param id Entity ID.
 * @param ignored Is ignored.
 * @param includePersonal 
 * @param item [EXPERIMENTAL] Supply multiple locators and return a union of the results.
 * @param lookupLimit Limit processing to the latest `<lookupLimit>` entities.
 * @param muted Is muted.
 * @param name 
 * @param newFailure 
 * @param start For paginated calls, from which entity to start rendering the page.
 * @param status Supported values: unknown/normal/warning/failure/error.
 * @param test Test locator.
 */
class TestOccurrenceLocator(
    @SerializedName("affectedProject") val affectedProject: String? = null,
    @SerializedName("branch") val branch: String? = null,
    @SerializedName("build") val build: String? = null,
    @SerializedName("buildType") val buildType: String? = null,
    @SerializedName("count") val count: Int? = null,
    @SerializedName("currentlyFailing") val currentlyFailing: Boolean? = null,
    @SerializedName("currentlyInvestigated") val currentlyInvestigated: Boolean? = null,
    @SerializedName("currentlyMuted") val currentlyMuted: String? = null,
    @SerializedName("id") val id: Int? = null,
    @SerializedName("ignored") val ignored: Boolean? = null,
    @SerializedName("includePersonal") val includePersonal: String? = null,
    @SerializedName("item") val item: String? = null,
    @SerializedName("lookupLimit") val lookupLimit: Int? = null,
    @SerializedName("muted") val muted: Boolean? = null,
    @SerializedName("name") val name: String? = null,
    @SerializedName("newFailure") val newFailure: String? = null,
    @SerializedName("start") val start: Int? = null,
    @SerializedName("status") val status: String? = null,
    @SerializedName("test") val test: String? = null
) : LocatorEntity() {
    @Transient private val classModelName: String = "TestOccurrenceLocator"


}

